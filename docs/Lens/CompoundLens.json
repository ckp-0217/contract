{
    "methods": {
        "cTokenBalances(address,address)": {
            "stateMutability": "nonpayable",
            "code": "function cTokenBalances(contract CToken cToken, address payable account) external nonpayable returns (struct CompoundLens.CTokenBalances)",
            "inputs": {
                "cToken": {
                    "type": "contract CToken"
                },
                "account": {
                    "type": "address payable"
                }
            },
            "outputs": {
                "_0": {
                    "type": "CompoundLens.CTokenBalances"
                }
            }
        },
        "cTokenBalancesAll(address[],address)": {
            "stateMutability": "nonpayable",
            "code": "function cTokenBalancesAll(contract CToken[] cTokens, address payable account) external nonpayable returns (struct CompoundLens.CTokenBalances[])",
            "inputs": {
                "cTokens": {
                    "type": "contract CToken[]"
                },
                "account": {
                    "type": "address payable"
                }
            },
            "outputs": {
                "_0": {
                    "type": "CompoundLens.CTokenBalances[]"
                }
            }
        },
        "cTokenMetadata(address)": {
            "stateMutability": "nonpayable",
            "code": "function cTokenMetadata(contract CToken cToken) external nonpayable returns (struct CompoundLens.CTokenMetadata)",
            "inputs": {
                "cToken": {
                    "type": "contract CToken"
                }
            },
            "outputs": {
                "_0": {
                    "type": "CompoundLens.CTokenMetadata"
                }
            }
        },
        "cTokenMetadataAll(address[])": {
            "stateMutability": "nonpayable",
            "code": "function cTokenMetadataAll(contract CToken[] cTokens) external nonpayable returns (struct CompoundLens.CTokenMetadata[])",
            "inputs": {
                "cTokens": {
                    "type": "contract CToken[]"
                }
            },
            "outputs": {
                "_0": {
                    "type": "CompoundLens.CTokenMetadata[]"
                }
            }
        },
        "cTokenUnderlyingPrice(address)": {
            "stateMutability": "nonpayable",
            "code": "function cTokenUnderlyingPrice(contract CToken cToken) external nonpayable returns (struct CompoundLens.CTokenUnderlyingPrice)",
            "inputs": {
                "cToken": {
                    "type": "contract CToken"
                }
            },
            "outputs": {
                "_0": {
                    "type": "CompoundLens.CTokenUnderlyingPrice"
                }
            }
        },
        "cTokenUnderlyingPriceAll(address[])": {
            "stateMutability": "nonpayable",
            "code": "function cTokenUnderlyingPriceAll(contract CToken[] cTokens) external nonpayable returns (struct CompoundLens.CTokenUnderlyingPrice[])",
            "inputs": {
                "cTokens": {
                    "type": "contract CToken[]"
                }
            },
            "outputs": {
                "_0": {
                    "type": "CompoundLens.CTokenUnderlyingPrice[]"
                }
            }
        },
        "getAccountLimits(address,address)": {
            "stateMutability": "nonpayable",
            "code": "function getAccountLimits(contract ComptrollerLensInterface comptroller, address account) external nonpayable returns (struct CompoundLens.AccountLimits)",
            "inputs": {
                "comptroller": {
                    "type": "contract ComptrollerLensInterface"
                },
                "account": {
                    "type": "address"
                }
            },
            "outputs": {
                "_0": {
                    "type": "CompoundLens.AccountLimits"
                }
            }
        },
        "getCompBalanceMetadata(address,address)": {
            "stateMutability": "view",
            "code": "function getCompBalanceMetadata(contract Comp comp, address account) external view returns (struct CompoundLens.CompBalanceMetadata)",
            "inputs": {
                "comp": {
                    "type": "contract Comp"
                },
                "account": {
                    "type": "address"
                }
            },
            "outputs": {
                "_0": {
                    "type": "CompoundLens.CompBalanceMetadata"
                }
            }
        },
        "getCompBalanceMetadataExt(address,address,address)": {
            "stateMutability": "nonpayable",
            "code": "function getCompBalanceMetadataExt(contract Comp comp, contract ComptrollerLensInterface comptroller, address account) external nonpayable returns (struct CompoundLens.CompBalanceMetadataExt)",
            "inputs": {
                "comp": {
                    "type": "contract Comp"
                },
                "comptroller": {
                    "type": "contract ComptrollerLensInterface"
                },
                "account": {
                    "type": "address"
                }
            },
            "outputs": {
                "_0": {
                    "type": "CompoundLens.CompBalanceMetadataExt"
                }
            }
        },
        "getCompVotes(address,address,uint32[])": {
            "stateMutability": "view",
            "code": "function getCompVotes(contract Comp comp, address account, uint32[] blockNumbers) external view returns (struct CompoundLens.CompVotes[])",
            "inputs": {
                "comp": {
                    "type": "contract Comp"
                },
                "account": {
                    "type": "address"
                },
                "blockNumbers": {
                    "type": "uint32[]"
                }
            },
            "outputs": {
                "_0": {
                    "type": "CompoundLens.CompVotes[]"
                }
            }
        },
        "getGovBravoProposals(address,uint256[])": {
            "stateMutability": "view",
            "code": "function getGovBravoProposals(contract GovernorBravoInterface governor, uint256[] proposalIds) external view returns (struct CompoundLens.GovBravoProposal[])",
            "inputs": {
                "governor": {
                    "type": "contract GovernorBravoInterface"
                },
                "proposalIds": {
                    "type": "uint256[]"
                }
            },
            "outputs": {
                "_0": {
                    "type": "CompoundLens.GovBravoProposal[]"
                }
            }
        },
        "getGovBravoReceipts(address,address,uint256[])": {
            "stateMutability": "view",
            "code": "function getGovBravoReceipts(contract GovernorBravoInterface governor, address voter, uint256[] proposalIds) external view returns (struct CompoundLens.GovBravoReceipt[])",
            "inputs": {
                "governor": {
                    "type": "contract GovernorBravoInterface"
                },
                "voter": {
                    "type": "address"
                },
                "proposalIds": {
                    "type": "uint256[]"
                }
            },
            "outputs": {
                "_0": {
                    "type": "CompoundLens.GovBravoReceipt[]"
                }
            }
        },
        "getGovProposals(address,uint256[])": {
            "stateMutability": "view",
            "code": "function getGovProposals(contract GovernorAlpha governor, uint256[] proposalIds) external view returns (struct CompoundLens.GovProposal[])",
            "inputs": {
                "governor": {
                    "type": "contract GovernorAlpha"
                },
                "proposalIds": {
                    "type": "uint256[]"
                }
            },
            "outputs": {
                "_0": {
                    "type": "CompoundLens.GovProposal[]"
                }
            }
        },
        "getGovReceipts(address,address,uint256[])": {
            "stateMutability": "view",
            "code": "function getGovReceipts(contract GovernorAlpha governor, address voter, uint256[] proposalIds) external view returns (struct CompoundLens.GovReceipt[])",
            "inputs": {
                "governor": {
                    "type": "contract GovernorAlpha"
                },
                "voter": {
                    "type": "address"
                },
                "proposalIds": {
                    "type": "uint256[]"
                }
            },
            "outputs": {
                "_0": {
                    "type": "CompoundLens.GovReceipt[]"
                }
            }
        }
    },
    "events": {},
    "errors": {},
    "path": "/Lens",
    "name": "CompoundLens"
}