{
    "methods": {
        "assumedOneMinusReserveFactorMantissa()": {
            "stateMutability": "view",
            "code": "function assumedOneMinusReserveFactorMantissa() external view returns (uint256)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            }
        },
        "baseRatePerBlock()": {
            "stateMutability": "view",
            "code": "function baseRatePerBlock() external view returns (uint256)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            }
        },
        "blocksPerYear()": {
            "stateMutability": "view",
            "code": "function blocksPerYear() external view returns (uint256)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            }
        },
        "dsrPerBlock()": {
            "stateMutability": "view",
            "code": "function dsrPerBlock() external view returns (uint256)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            },
            "notice": "Calculates the Dai savings rate per block"
        },
        "gapPerBlock()": {
            "stateMutability": "view",
            "code": "function gapPerBlock() external view returns (uint256)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            }
        },
        "getBorrowRate(uint256,uint256,uint256)": {
            "stateMutability": "view",
            "code": "function getBorrowRate(uint256 cash, uint256 borrows, uint256 reserves) external view returns (uint256)",
            "inputs": {
                "cash": {
                    "type": "uint256",
                    "description": "The amount of cash in the market"
                },
                "borrows": {
                    "type": "uint256",
                    "description": "The amount of borrows in the market"
                },
                "reserves": {
                    "type": "uint256",
                    "description": "The amount of reserves in the market"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            },
            "notice": "Calculates the current borrow rate per block"
        },
        "getSupplyRate(uint256,uint256,uint256,uint256)": {
            "stateMutability": "view",
            "code": "function getSupplyRate(uint256 cash, uint256 borrows, uint256 reserves, uint256 reserveFactorMantissa) external view returns (uint256)",
            "inputs": {
                "cash": {
                    "type": "uint256",
                    "description": "The total amount of cash the market has"
                },
                "borrows": {
                    "type": "uint256",
                    "description": "The total amount of borrows the market has outstanding"
                },
                "reserves": {
                    "type": "uint256",
                    "description": "The total amnount of reserves the market has"
                },
                "reserveFactorMantissa": {
                    "type": "uint256",
                    "description": "The current reserve factor the market has"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            },
            "notice": "Calculates the current supply interest rate per block including the Dai savings rate"
        },
        "isInterestRateModel()": {
            "stateMutability": "view",
            "code": "function isInterestRateModel() external view returns (bool)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            }
        },
        "jumpMultiplierPerBlock()": {
            "stateMutability": "view",
            "code": "function jumpMultiplierPerBlock() external view returns (uint256)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            }
        },
        "kink()": {
            "stateMutability": "view",
            "code": "function kink() external view returns (uint256)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            }
        },
        "multiplierPerBlock()": {
            "stateMutability": "view",
            "code": "function multiplierPerBlock() external view returns (uint256)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            }
        },
        "owner()": {
            "stateMutability": "view",
            "code": "function owner() external view returns (address)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "address"
                }
            }
        },
        "poke()": {
            "stateMutability": "nonpayable",
            "code": "function poke() external nonpayable",
            "inputs": {},
            "outputs": {},
            "notice": "Resets the baseRate and multiplier per block based on the stability fee and Dai savings rate"
        },
        "updateJumpRateModel(uint256,uint256,uint256,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function updateJumpRateModel(uint256 baseRatePerYear, uint256 gapPerYear, uint256 jumpMultiplierPerYear, uint256 kink_) external nonpayable",
            "inputs": {
                "baseRatePerYear": {
                    "type": "uint256",
                    "description": "The approximate target base APR, as a mantissa (scaled by 1e18). For DAI, this is calculated from DSR and SF. Input not used."
                },
                "gapPerYear": {
                    "type": "uint256",
                    "description": "The Additional margin per year separating the base borrow rate from the roof. (scaled by 1e18)"
                },
                "jumpMultiplierPerYear": {
                    "type": "uint256",
                    "description": "The jumpMultiplierPerYear after hitting a specified utilization point"
                },
                "kink_": {
                    "type": "uint256",
                    "description": "The utilization point at which the jump multiplier is applied"
                }
            },
            "outputs": {},
            "notice": "External function to update the parameters of the interest rate model"
        },
        "utilizationRate(uint256,uint256,uint256)": {
            "stateMutability": "pure",
            "code": "function utilizationRate(uint256 cash, uint256 borrows, uint256 reserves) external pure returns (uint256)",
            "inputs": {
                "cash": {
                    "type": "uint256",
                    "description": "The amount of cash in the market"
                },
                "borrows": {
                    "type": "uint256",
                    "description": "The amount of borrows in the market"
                },
                "reserves": {
                    "type": "uint256",
                    "description": "The amount of reserves in the market (currently unused)"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            },
            "notice": "Calculates the utilization rate of the market: `borrows / (cash + borrows - reserves)`"
        }
    },
    "events": {
        "NewInterestParams": {
            "code": "event NewInterestParams(uint256 baseRatePerBlock, uint256 multiplierPerBlock, uint256 jumpMultiplierPerBlock, uint256 kink)",
            "inputs": {
                "baseRatePerBlock": {
                    "type": "uint256",
                    "indexed": false
                },
                "multiplierPerBlock": {
                    "type": "uint256",
                    "indexed": false
                },
                "jumpMultiplierPerBlock": {
                    "type": "uint256",
                    "indexed": false
                },
                "kink": {
                    "type": "uint256",
                    "indexed": false
                }
            }
        }
    },
    "errors": {},
    "path": "",
    "title": "Compound's DAIInterestRateModel Contract (version 3)",
    "notice": "The parameterized model described in section 2.4 of the original Compound Protocol whitepaper. Version 3 modifies the interest rate model in Version 2 by increasing the initial \"gap\" or slope of the model prior to the \"kink\" from 2% to 4%, and enabling updateable parameters.",
    "author": "Compound (modified by Dharma Labs)",
    "name": "DAIInterestRateModelV3"
}