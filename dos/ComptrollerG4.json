{
    "methods": {
        "_addCompMarkets(address[])": {
            "stateMutability": "nonpayable",
            "code": "function _addCompMarkets(address[] cTokens) external nonpayable",
            "inputs": {
                "cTokens": {
                    "type": "address[]",
                    "description": "The addresses of the markets to add"
                }
            },
            "outputs": {},
            "notice": "Add markets to compMarkets, allowing them to earn COMP in the flywheel"
        },
        "_become(address)": {
            "stateMutability": "nonpayable",
            "code": "function _become(contract Unitroller unitroller) external nonpayable",
            "inputs": {
                "unitroller": {
                    "type": "contract Unitroller"
                }
            },
            "outputs": {}
        },
        "_borrowGuardianPaused()": {
            "stateMutability": "view",
            "code": "function _borrowGuardianPaused() external view returns (bool)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            }
        },
        "_dropCompMarket(address)": {
            "stateMutability": "nonpayable",
            "code": "function _dropCompMarket(address cToken) external nonpayable",
            "inputs": {
                "cToken": {
                    "type": "address",
                    "description": "The address of the market to drop"
                }
            },
            "outputs": {},
            "notice": "Remove a market from compMarkets, preventing it from earning COMP in the flywheel"
        },
        "_mintGuardianPaused()": {
            "stateMutability": "view",
            "code": "function _mintGuardianPaused() external view returns (bool)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            }
        },
        "_setBorrowPaused(address,bool)": {
            "stateMutability": "nonpayable",
            "code": "function _setBorrowPaused(contract CToken cToken, bool state) external nonpayable returns (bool)",
            "inputs": {
                "cToken": {
                    "type": "contract CToken"
                },
                "state": {
                    "type": "bool"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            }
        },
        "_setCloseFactor(uint256)": {
            "stateMutability": "nonpayable",
            "code": "function _setCloseFactor(uint256 newCloseFactorMantissa) external nonpayable returns (uint256)",
            "inputs": {
                "newCloseFactorMantissa": {
                    "type": "uint256",
                    "description": "New close factor, scaled by 1e18"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            },
            "notice": "Sets the closeFactor used when liquidating borrows",
            "details": "Admin function to set closeFactor"
        },
        "_setCollateralFactor(address,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function _setCollateralFactor(contract CToken cToken, uint256 newCollateralFactorMantissa) external nonpayable returns (uint256)",
            "inputs": {
                "cToken": {
                    "type": "contract CToken",
                    "description": "The market to set the factor on"
                },
                "newCollateralFactorMantissa": {
                    "type": "uint256",
                    "description": "The new collateral factor, scaled by 1e18"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            },
            "notice": "Sets the collateralFactor for a market",
            "details": "Admin function to set per-market collateralFactor"
        },
        "_setCompRate(uint256)": {
            "stateMutability": "nonpayable",
            "code": "function _setCompRate(uint256 compRate_) external nonpayable",
            "inputs": {
                "compRate_": {
                    "type": "uint256",
                    "description": "The amount of COMP wei per block to distribute"
                }
            },
            "outputs": {},
            "notice": "Set the amount of COMP distributed per block"
        },
        "_setLiquidationIncentive(uint256)": {
            "stateMutability": "nonpayable",
            "code": "function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa) external nonpayable returns (uint256)",
            "inputs": {
                "newLiquidationIncentiveMantissa": {
                    "type": "uint256",
                    "description": "New liquidationIncentive scaled by 1e18"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            },
            "notice": "Sets liquidationIncentive",
            "details": "Admin function to set liquidationIncentive"
        },
        "_setMaxAssets(uint256)": {
            "stateMutability": "nonpayable",
            "code": "function _setMaxAssets(uint256 newMaxAssets) external nonpayable returns (uint256)",
            "inputs": {
                "newMaxAssets": {
                    "type": "uint256",
                    "description": "New max assets"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            },
            "notice": "Sets maxAssets which controls how many markets can be entered",
            "details": "Admin function to set maxAssets"
        },
        "_setMintPaused(address,bool)": {
            "stateMutability": "nonpayable",
            "code": "function _setMintPaused(contract CToken cToken, bool state) external nonpayable returns (bool)",
            "inputs": {
                "cToken": {
                    "type": "contract CToken"
                },
                "state": {
                    "type": "bool"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            }
        },
        "_setPauseGuardian(address)": {
            "stateMutability": "nonpayable",
            "code": "function _setPauseGuardian(address newPauseGuardian) external nonpayable returns (uint256)",
            "inputs": {
                "newPauseGuardian": {
                    "type": "address",
                    "description": "The address of the new Pause Guardian"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            },
            "notice": "Admin function to change the Pause Guardian"
        },
        "_setPriceOracle(address)": {
            "stateMutability": "nonpayable",
            "code": "function _setPriceOracle(contract PriceOracle newOracle) external nonpayable returns (uint256)",
            "inputs": {
                "newOracle": {
                    "type": "contract PriceOracle"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            },
            "notice": "Sets a new price oracle for the comptroller",
            "details": "Admin function to set a new price oracle"
        },
        "_setSeizePaused(bool)": {
            "stateMutability": "nonpayable",
            "code": "function _setSeizePaused(bool state) external nonpayable returns (bool)",
            "inputs": {
                "state": {
                    "type": "bool"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            }
        },
        "_setTransferPaused(bool)": {
            "stateMutability": "nonpayable",
            "code": "function _setTransferPaused(bool state) external nonpayable returns (bool)",
            "inputs": {
                "state": {
                    "type": "bool"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            }
        },
        "_supportMarket(address)": {
            "stateMutability": "nonpayable",
            "code": "function _supportMarket(contract CToken cToken) external nonpayable returns (uint256)",
            "inputs": {
                "cToken": {
                    "type": "contract CToken",
                    "description": "The address of the market (token) to list"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            },
            "notice": "Add the market to the markets mapping and set it as listed",
            "details": "Admin function to set isListed and add support for the market"
        },
        "accountAssets(address,uint256)": {
            "stateMutability": "view",
            "code": "function accountAssets(address, uint256) external view returns (contract CToken)",
            "inputs": {
                "_0": {
                    "type": "address"
                },
                "_1": {
                    "type": "uint256"
                }
            },
            "outputs": {
                "_0": {
                    "type": "contract CToken"
                }
            }
        },
        "admin()": {
            "stateMutability": "view",
            "code": "function admin() external view returns (address)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "address"
                }
            }
        },
        "allMarkets(uint256)": {
            "stateMutability": "view",
            "code": "function allMarkets(uint256) external view returns (contract CToken)",
            "inputs": {
                "_0": {
                    "type": "uint256"
                }
            },
            "outputs": {
                "_0": {
                    "type": "contract CToken"
                }
            }
        },
        "borrowAllowed(address,address,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function borrowAllowed(address cToken, address borrower, uint256 borrowAmount) external nonpayable returns (uint256)",
            "inputs": {
                "cToken": {
                    "type": "address",
                    "description": "The market to verify the borrow against"
                },
                "borrower": {
                    "type": "address",
                    "description": "The account which would borrow the asset"
                },
                "borrowAmount": {
                    "type": "uint256",
                    "description": "The amount of underlying the account would borrow"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            },
            "notice": "Checks if the account should be allowed to borrow the underlying asset of the given market"
        },
        "borrowGuardianPaused(address)": {
            "stateMutability": "view",
            "code": "function borrowGuardianPaused(address) external view returns (bool)",
            "inputs": {
                "_0": {
                    "type": "address"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            }
        },
        "borrowVerify(address,address,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function borrowVerify(address cToken, address borrower, uint256 borrowAmount) external nonpayable",
            "inputs": {
                "cToken": {
                    "type": "address",
                    "description": "Asset whose underlying is being borrowed"
                },
                "borrower": {
                    "type": "address",
                    "description": "The address borrowing the underlying"
                },
                "borrowAmount": {
                    "type": "uint256",
                    "description": "The amount of the underlying asset requested to borrow"
                }
            },
            "outputs": {},
            "notice": "Validates borrow and reverts on rejection. May emit logs."
        },
        "checkMembership(address,address)": {
            "stateMutability": "view",
            "code": "function checkMembership(address account, contract CToken cToken) external view returns (bool)",
            "inputs": {
                "account": {
                    "type": "address",
                    "description": "The address of the account to check"
                },
                "cToken": {
                    "type": "contract CToken",
                    "description": "The cToken to check"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            },
            "notice": "Returns whether the given account is entered in the given asset"
        },
        "claimComp(address,address[])": {
            "stateMutability": "nonpayable",
            "code": "function claimComp(address holder, contract CToken[] cTokens) external nonpayable",
            "inputs": {
                "holder": {
                    "type": "address",
                    "description": "The address to claim COMP for"
                },
                "cTokens": {
                    "type": "contract CToken[]",
                    "description": "The list of markets to claim COMP in"
                }
            },
            "outputs": {},
            "notice": "Claim all the comp accrued by holder in the specified markets"
        },
        "claimComp(address[],address[],bool,bool)": {
            "stateMutability": "nonpayable",
            "code": "function claimComp(address[] holders, contract CToken[] cTokens, bool borrowers, bool suppliers) external nonpayable",
            "inputs": {
                "holders": {
                    "type": "address[]",
                    "description": "The addresses to claim COMP for"
                },
                "cTokens": {
                    "type": "contract CToken[]",
                    "description": "The list of markets to claim COMP in"
                },
                "borrowers": {
                    "type": "bool",
                    "description": "Whether or not to claim COMP earned by borrowing"
                },
                "suppliers": {
                    "type": "bool",
                    "description": "Whether or not to claim COMP earned by supplying"
                }
            },
            "outputs": {},
            "notice": "Claim all comp accrued by the holders"
        },
        "claimComp(address)": {
            "stateMutability": "nonpayable",
            "code": "function claimComp(address holder) external nonpayable",
            "inputs": {
                "holder": {
                    "type": "address",
                    "description": "The address to claim COMP for"
                }
            },
            "outputs": {},
            "notice": "Claim all the comp accrued by holder in all markets"
        },
        "closeFactorMantissa()": {
            "stateMutability": "view",
            "code": "function closeFactorMantissa() external view returns (uint256)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            }
        },
        "compAccrued(address)": {
            "stateMutability": "view",
            "code": "function compAccrued(address) external view returns (uint256)",
            "inputs": {
                "_0": {
                    "type": "address"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            }
        },
        "compBorrowState(address)": {
            "stateMutability": "view",
            "code": "function compBorrowState(address) external view returns (uint224 index, uint32 block)",
            "inputs": {
                "_0": {
                    "type": "address"
                }
            },
            "outputs": {
                "index": {
                    "type": "uint224"
                },
                "block": {
                    "type": "uint32"
                }
            }
        },
        "compBorrowerIndex(address,address)": {
            "stateMutability": "view",
            "code": "function compBorrowerIndex(address, address) external view returns (uint256)",
            "inputs": {
                "_0": {
                    "type": "address"
                },
                "_1": {
                    "type": "address"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            }
        },
        "compClaimThreshold()": {
            "stateMutability": "view",
            "code": "function compClaimThreshold() external view returns (uint256)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            }
        },
        "compInitialIndex()": {
            "stateMutability": "view",
            "code": "function compInitialIndex() external view returns (uint224)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint224"
                }
            }
        },
        "compRate()": {
            "stateMutability": "view",
            "code": "function compRate() external view returns (uint256)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            }
        },
        "compSpeeds(address)": {
            "stateMutability": "view",
            "code": "function compSpeeds(address) external view returns (uint256)",
            "inputs": {
                "_0": {
                    "type": "address"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            }
        },
        "compSupplierIndex(address,address)": {
            "stateMutability": "view",
            "code": "function compSupplierIndex(address, address) external view returns (uint256)",
            "inputs": {
                "_0": {
                    "type": "address"
                },
                "_1": {
                    "type": "address"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            }
        },
        "compSupplyState(address)": {
            "stateMutability": "view",
            "code": "function compSupplyState(address) external view returns (uint224 index, uint32 block)",
            "inputs": {
                "_0": {
                    "type": "address"
                }
            },
            "outputs": {
                "index": {
                    "type": "uint224"
                },
                "block": {
                    "type": "uint32"
                }
            }
        },
        "comptrollerImplementation()": {
            "stateMutability": "view",
            "code": "function comptrollerImplementation() external view returns (address)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "address"
                }
            }
        },
        "enterMarkets(address[])": {
            "stateMutability": "nonpayable",
            "code": "function enterMarkets(address[] cTokens) external nonpayable returns (uint256[])",
            "inputs": {
                "cTokens": {
                    "type": "address[]",
                    "description": "The list of addresses of the cToken markets to be enabled"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256[]"
                }
            },
            "notice": "Add assets to be included in account liquidity calculation"
        },
        "exitMarket(address)": {
            "stateMutability": "nonpayable",
            "code": "function exitMarket(address cTokenAddress) external nonpayable returns (uint256)",
            "inputs": {
                "cTokenAddress": {
                    "type": "address",
                    "description": "The address of the asset to be removed"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            },
            "notice": "Removes asset from sender's account liquidity calculation",
            "details": "Sender must not have an outstanding borrow balance in the asset, or be providing necessary collateral for an outstanding borrow."
        },
        "getAccountLiquidity(address)": {
            "stateMutability": "view",
            "code": "function getAccountLiquidity(address account) external view returns (uint256, uint256, uint256)",
            "inputs": {
                "account": {
                    "type": "address"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                },
                "_1": {
                    "type": "uint256"
                },
                "_2": {
                    "type": "uint256"
                }
            },
            "notice": "Determine the current account liquidity wrt collateral requirements"
        },
        "getAllMarkets()": {
            "stateMutability": "view",
            "code": "function getAllMarkets() external view returns (contract CToken[])",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "contract CToken[]"
                }
            },
            "notice": "Return all of the markets",
            "details": "The automatic getter may be used to access an individual market."
        },
        "getAssetsIn(address)": {
            "stateMutability": "view",
            "code": "function getAssetsIn(address account) external view returns (contract CToken[])",
            "inputs": {
                "account": {
                    "type": "address",
                    "description": "The address of the account to pull assets for"
                }
            },
            "outputs": {
                "_0": {
                    "type": "contract CToken[]"
                }
            },
            "notice": "Returns the assets an account has entered"
        },
        "getBlockNumber()": {
            "stateMutability": "view",
            "code": "function getBlockNumber() external view returns (uint256)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            }
        },
        "getCompAddress()": {
            "stateMutability": "view",
            "code": "function getCompAddress() external view returns (address)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "address"
                }
            },
            "notice": "Return the address of the COMP token"
        },
        "getHypotheticalAccountLiquidity(address,address,uint256,uint256)": {
            "stateMutability": "view",
            "code": "function getHypotheticalAccountLiquidity(address account, address cTokenModify, uint256 redeemTokens, uint256 borrowAmount) external view returns (uint256, uint256, uint256)",
            "inputs": {
                "account": {
                    "type": "address",
                    "description": "The account to determine liquidity for"
                },
                "cTokenModify": {
                    "type": "address",
                    "description": "The market to hypothetically redeem/borrow in"
                },
                "redeemTokens": {
                    "type": "uint256",
                    "description": "The number of tokens to hypothetically redeem"
                },
                "borrowAmount": {
                    "type": "uint256",
                    "description": "The amount of underlying to hypothetically borrow"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                },
                "_1": {
                    "type": "uint256"
                },
                "_2": {
                    "type": "uint256"
                }
            },
            "notice": "Determine what the account liquidity would be if the given amounts were redeemed/borrowed"
        },
        "isComptroller()": {
            "stateMutability": "view",
            "code": "function isComptroller() external view returns (bool)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            }
        },
        "liquidateBorrowAllowed(address,address,address,address,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function liquidateBorrowAllowed(address cTokenBorrowed, address cTokenCollateral, address liquidator, address borrower, uint256 repayAmount) external nonpayable returns (uint256)",
            "inputs": {
                "cTokenBorrowed": {
                    "type": "address",
                    "description": "Asset which was borrowed by the borrower"
                },
                "cTokenCollateral": {
                    "type": "address",
                    "description": "Asset which was used as collateral and will be seized"
                },
                "liquidator": {
                    "type": "address",
                    "description": "The address repaying the borrow and seizing the collateral"
                },
                "borrower": {
                    "type": "address",
                    "description": "The address of the borrower"
                },
                "repayAmount": {
                    "type": "uint256",
                    "description": "The amount of underlying being repaid"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            },
            "notice": "Checks if the liquidation should be allowed to occur"
        },
        "liquidateBorrowVerify(address,address,address,address,uint256,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function liquidateBorrowVerify(address cTokenBorrowed, address cTokenCollateral, address liquidator, address borrower, uint256 actualRepayAmount, uint256 seizeTokens) external nonpayable",
            "inputs": {
                "cTokenBorrowed": {
                    "type": "address",
                    "description": "Asset which was borrowed by the borrower"
                },
                "cTokenCollateral": {
                    "type": "address",
                    "description": "Asset which was used as collateral and will be seized"
                },
                "liquidator": {
                    "type": "address",
                    "description": "The address repaying the borrow and seizing the collateral"
                },
                "borrower": {
                    "type": "address",
                    "description": "The address of the borrower"
                },
                "actualRepayAmount": {
                    "type": "uint256",
                    "description": "The amount of underlying being repaid"
                },
                "seizeTokens": {
                    "type": "uint256"
                }
            },
            "outputs": {},
            "notice": "Validates liquidateBorrow and reverts on rejection. May emit logs."
        },
        "liquidateCalculateSeizeTokens(address,address,uint256)": {
            "stateMutability": "view",
            "code": "function liquidateCalculateSeizeTokens(address cTokenBorrowed, address cTokenCollateral, uint256 actualRepayAmount) external view returns (uint256, uint256)",
            "inputs": {
                "cTokenBorrowed": {
                    "type": "address",
                    "description": "The address of the borrowed cToken"
                },
                "cTokenCollateral": {
                    "type": "address",
                    "description": "The address of the collateral cToken"
                },
                "actualRepayAmount": {
                    "type": "uint256",
                    "description": "The amount of cTokenBorrowed underlying to convert into cTokenCollateral tokens"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                },
                "_1": {
                    "type": "uint256"
                }
            },
            "notice": "Calculate number of tokens of collateral asset to seize given an underlying amount",
            "details": "Used in liquidation (called in cToken.liquidateBorrowFresh)"
        },
        "liquidationIncentiveMantissa()": {
            "stateMutability": "view",
            "code": "function liquidationIncentiveMantissa() external view returns (uint256)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            }
        },
        "markets(address)": {
            "stateMutability": "view",
            "code": "function markets(address) external view returns (bool isListed, uint256 collateralFactorMantissa, bool isComped)",
            "inputs": {
                "_0": {
                    "type": "address"
                }
            },
            "outputs": {
                "isListed": {
                    "type": "bool"
                },
                "collateralFactorMantissa": {
                    "type": "uint256"
                },
                "isComped": {
                    "type": "bool"
                }
            }
        },
        "maxAssets()": {
            "stateMutability": "view",
            "code": "function maxAssets() external view returns (uint256)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            }
        },
        "mintAllowed(address,address,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function mintAllowed(address cToken, address minter, uint256 mintAmount) external nonpayable returns (uint256)",
            "inputs": {
                "cToken": {
                    "type": "address",
                    "description": "The market to verify the mint against"
                },
                "minter": {
                    "type": "address",
                    "description": "The account which would get the minted tokens"
                },
                "mintAmount": {
                    "type": "uint256",
                    "description": "The amount of underlying being supplied to the market in exchange for tokens"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            },
            "notice": "Checks if the account should be allowed to mint tokens in the given market"
        },
        "mintGuardianPaused(address)": {
            "stateMutability": "view",
            "code": "function mintGuardianPaused(address) external view returns (bool)",
            "inputs": {
                "_0": {
                    "type": "address"
                }
            },
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            }
        },
        "mintVerify(address,address,uint256,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function mintVerify(address cToken, address minter, uint256 actualMintAmount, uint256 mintTokens) external nonpayable",
            "inputs": {
                "cToken": {
                    "type": "address",
                    "description": "Asset being minted"
                },
                "minter": {
                    "type": "address",
                    "description": "The address minting the tokens"
                },
                "actualMintAmount": {
                    "type": "uint256",
                    "description": "The amount of the underlying asset being minted"
                },
                "mintTokens": {
                    "type": "uint256",
                    "description": "The number of tokens being minted"
                }
            },
            "outputs": {},
            "notice": "Validates mint and reverts on rejection. May emit logs."
        },
        "oracle()": {
            "stateMutability": "view",
            "code": "function oracle() external view returns (contract PriceOracle)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "contract PriceOracle"
                }
            }
        },
        "pauseGuardian()": {
            "stateMutability": "view",
            "code": "function pauseGuardian() external view returns (address)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "address"
                }
            }
        },
        "pendingAdmin()": {
            "stateMutability": "view",
            "code": "function pendingAdmin() external view returns (address)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "address"
                }
            }
        },
        "pendingComptrollerImplementation()": {
            "stateMutability": "view",
            "code": "function pendingComptrollerImplementation() external view returns (address)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "address"
                }
            }
        },
        "redeemAllowed(address,address,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function redeemAllowed(address cToken, address redeemer, uint256 redeemTokens) external nonpayable returns (uint256)",
            "inputs": {
                "cToken": {
                    "type": "address",
                    "description": "The market to verify the redeem against"
                },
                "redeemer": {
                    "type": "address",
                    "description": "The account which would redeem the tokens"
                },
                "redeemTokens": {
                    "type": "uint256",
                    "description": "The number of cTokens to exchange for the underlying asset in the market"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            },
            "notice": "Checks if the account should be allowed to redeem tokens in the given market"
        },
        "redeemVerify(address,address,uint256,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function redeemVerify(address cToken, address redeemer, uint256 redeemAmount, uint256 redeemTokens) external nonpayable",
            "inputs": {
                "cToken": {
                    "type": "address",
                    "description": "Asset being redeemed"
                },
                "redeemer": {
                    "type": "address",
                    "description": "The address redeeming the tokens"
                },
                "redeemAmount": {
                    "type": "uint256",
                    "description": "The amount of the underlying asset being redeemed"
                },
                "redeemTokens": {
                    "type": "uint256",
                    "description": "The number of tokens being redeemed"
                }
            },
            "outputs": {},
            "notice": "Validates redeem and reverts on rejection. May emit logs."
        },
        "refreshCompSpeeds()": {
            "stateMutability": "nonpayable",
            "code": "function refreshCompSpeeds() external nonpayable",
            "inputs": {},
            "outputs": {},
            "notice": "Recalculate and update COMP speeds for all COMP markets"
        },
        "repayBorrowAllowed(address,address,address,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function repayBorrowAllowed(address cToken, address payer, address borrower, uint256 repayAmount) external nonpayable returns (uint256)",
            "inputs": {
                "cToken": {
                    "type": "address",
                    "description": "The market to verify the repay against"
                },
                "payer": {
                    "type": "address",
                    "description": "The account which would repay the asset"
                },
                "borrower": {
                    "type": "address",
                    "description": "The account which would borrowed the asset"
                },
                "repayAmount": {
                    "type": "uint256",
                    "description": "The amount of the underlying asset the account would repay"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            },
            "notice": "Checks if the account should be allowed to repay a borrow in the given market"
        },
        "repayBorrowVerify(address,address,address,uint256,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function repayBorrowVerify(address cToken, address payer, address borrower, uint256 actualRepayAmount, uint256 borrowerIndex) external nonpayable",
            "inputs": {
                "cToken": {
                    "type": "address",
                    "description": "Asset being repaid"
                },
                "payer": {
                    "type": "address",
                    "description": "The address repaying the borrow"
                },
                "borrower": {
                    "type": "address",
                    "description": "The address of the borrower"
                },
                "actualRepayAmount": {
                    "type": "uint256",
                    "description": "The amount of underlying being repaid"
                },
                "borrowerIndex": {
                    "type": "uint256"
                }
            },
            "outputs": {},
            "notice": "Validates repayBorrow and reverts on rejection. May emit logs."
        },
        "seizeAllowed(address,address,address,address,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function seizeAllowed(address cTokenCollateral, address cTokenBorrowed, address liquidator, address borrower, uint256 seizeTokens) external nonpayable returns (uint256)",
            "inputs": {
                "cTokenCollateral": {
                    "type": "address",
                    "description": "Asset which was used as collateral and will be seized"
                },
                "cTokenBorrowed": {
                    "type": "address",
                    "description": "Asset which was borrowed by the borrower"
                },
                "liquidator": {
                    "type": "address",
                    "description": "The address repaying the borrow and seizing the collateral"
                },
                "borrower": {
                    "type": "address",
                    "description": "The address of the borrower"
                },
                "seizeTokens": {
                    "type": "uint256",
                    "description": "The number of collateral tokens to seize"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            },
            "notice": "Checks if the seizing of assets should be allowed to occur"
        },
        "seizeGuardianPaused()": {
            "stateMutability": "view",
            "code": "function seizeGuardianPaused() external view returns (bool)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            }
        },
        "seizeVerify(address,address,address,address,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function seizeVerify(address cTokenCollateral, address cTokenBorrowed, address liquidator, address borrower, uint256 seizeTokens) external nonpayable",
            "inputs": {
                "cTokenCollateral": {
                    "type": "address",
                    "description": "Asset which was used as collateral and will be seized"
                },
                "cTokenBorrowed": {
                    "type": "address",
                    "description": "Asset which was borrowed by the borrower"
                },
                "liquidator": {
                    "type": "address",
                    "description": "The address repaying the borrow and seizing the collateral"
                },
                "borrower": {
                    "type": "address",
                    "description": "The address of the borrower"
                },
                "seizeTokens": {
                    "type": "uint256",
                    "description": "The number of collateral tokens to seize"
                }
            },
            "outputs": {},
            "notice": "Validates seize and reverts on rejection. May emit logs."
        },
        "transferAllowed(address,address,address,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function transferAllowed(address cToken, address src, address dst, uint256 transferTokens) external nonpayable returns (uint256)",
            "inputs": {
                "cToken": {
                    "type": "address",
                    "description": "The market to verify the transfer against"
                },
                "src": {
                    "type": "address",
                    "description": "The account which sources the tokens"
                },
                "dst": {
                    "type": "address",
                    "description": "The account which receives the tokens"
                },
                "transferTokens": {
                    "type": "uint256",
                    "description": "The number of cTokens to transfer"
                }
            },
            "outputs": {
                "_0": {
                    "type": "uint256"
                }
            },
            "notice": "Checks if the account should be allowed to transfer tokens in the given market"
        },
        "transferGuardianPaused()": {
            "stateMutability": "view",
            "code": "function transferGuardianPaused() external view returns (bool)",
            "inputs": {},
            "outputs": {
                "_0": {
                    "type": "bool"
                }
            }
        },
        "transferVerify(address,address,address,uint256)": {
            "stateMutability": "nonpayable",
            "code": "function transferVerify(address cToken, address src, address dst, uint256 transferTokens) external nonpayable",
            "inputs": {
                "cToken": {
                    "type": "address",
                    "description": "Asset being transferred"
                },
                "src": {
                    "type": "address",
                    "description": "The account which sources the tokens"
                },
                "dst": {
                    "type": "address",
                    "description": "The account which receives the tokens"
                },
                "transferTokens": {
                    "type": "uint256",
                    "description": "The number of cTokens to transfer"
                }
            },
            "outputs": {},
            "notice": "Validates transfer and reverts on rejection. May emit logs."
        }
    },
    "events": {
        "ActionPaused": {
            "code": "event ActionPaused(contract CToken cToken, string action, bool pauseState)",
            "inputs": {
                "cToken": {
                    "type": "contract CToken",
                    "indexed": false
                },
                "action": {
                    "type": "string",
                    "indexed": false
                },
                "pauseState": {
                    "type": "bool",
                    "indexed": false
                }
            }
        },
        "CompSpeedUpdated": {
            "code": "event CompSpeedUpdated(contract CToken indexed cToken, uint256 newSpeed)",
            "inputs": {
                "cToken": {
                    "type": "contract CToken",
                    "indexed": true
                },
                "newSpeed": {
                    "type": "uint256",
                    "indexed": false
                }
            }
        },
        "DistributedBorrowerComp": {
            "code": "event DistributedBorrowerComp(contract CToken indexed cToken, address indexed borrower, uint256 compDelta, uint256 compBorrowIndex)",
            "inputs": {
                "cToken": {
                    "type": "contract CToken",
                    "indexed": true
                },
                "borrower": {
                    "type": "address",
                    "indexed": true
                },
                "compDelta": {
                    "type": "uint256",
                    "indexed": false
                },
                "compBorrowIndex": {
                    "type": "uint256",
                    "indexed": false
                }
            }
        },
        "DistributedSupplierComp": {
            "code": "event DistributedSupplierComp(contract CToken indexed cToken, address indexed supplier, uint256 compDelta, uint256 compSupplyIndex)",
            "inputs": {
                "cToken": {
                    "type": "contract CToken",
                    "indexed": true
                },
                "supplier": {
                    "type": "address",
                    "indexed": true
                },
                "compDelta": {
                    "type": "uint256",
                    "indexed": false
                },
                "compSupplyIndex": {
                    "type": "uint256",
                    "indexed": false
                }
            }
        },
        "Failure": {
            "code": "event Failure(uint256 error, uint256 info, uint256 detail)",
            "inputs": {
                "error": {
                    "type": "uint256",
                    "indexed": false
                },
                "info": {
                    "type": "uint256",
                    "indexed": false
                },
                "detail": {
                    "type": "uint256",
                    "indexed": false
                }
            }
        },
        "MarketComped": {
            "code": "event MarketComped(contract CToken cToken, bool isComped)",
            "inputs": {
                "cToken": {
                    "type": "contract CToken",
                    "indexed": false
                },
                "isComped": {
                    "type": "bool",
                    "indexed": false
                }
            }
        },
        "MarketEntered": {
            "code": "event MarketEntered(contract CToken cToken, address account)",
            "inputs": {
                "cToken": {
                    "type": "contract CToken",
                    "indexed": false
                },
                "account": {
                    "type": "address",
                    "indexed": false
                }
            }
        },
        "MarketExited": {
            "code": "event MarketExited(contract CToken cToken, address account)",
            "inputs": {
                "cToken": {
                    "type": "contract CToken",
                    "indexed": false
                },
                "account": {
                    "type": "address",
                    "indexed": false
                }
            }
        },
        "MarketListed": {
            "code": "event MarketListed(contract CToken cToken)",
            "inputs": {
                "cToken": {
                    "type": "contract CToken",
                    "indexed": false
                }
            }
        },
        "NewCloseFactor": {
            "code": "event NewCloseFactor(uint256 oldCloseFactorMantissa, uint256 newCloseFactorMantissa)",
            "inputs": {
                "oldCloseFactorMantissa": {
                    "type": "uint256",
                    "indexed": false
                },
                "newCloseFactorMantissa": {
                    "type": "uint256",
                    "indexed": false
                }
            }
        },
        "NewCollateralFactor": {
            "code": "event NewCollateralFactor(contract CToken cToken, uint256 oldCollateralFactorMantissa, uint256 newCollateralFactorMantissa)",
            "inputs": {
                "cToken": {
                    "type": "contract CToken",
                    "indexed": false
                },
                "oldCollateralFactorMantissa": {
                    "type": "uint256",
                    "indexed": false
                },
                "newCollateralFactorMantissa": {
                    "type": "uint256",
                    "indexed": false
                }
            }
        },
        "NewCompRate": {
            "code": "event NewCompRate(uint256 oldCompRate, uint256 newCompRate)",
            "inputs": {
                "oldCompRate": {
                    "type": "uint256",
                    "indexed": false
                },
                "newCompRate": {
                    "type": "uint256",
                    "indexed": false
                }
            }
        },
        "NewLiquidationIncentive": {
            "code": "event NewLiquidationIncentive(uint256 oldLiquidationIncentiveMantissa, uint256 newLiquidationIncentiveMantissa)",
            "inputs": {
                "oldLiquidationIncentiveMantissa": {
                    "type": "uint256",
                    "indexed": false
                },
                "newLiquidationIncentiveMantissa": {
                    "type": "uint256",
                    "indexed": false
                }
            }
        },
        "NewMaxAssets": {
            "code": "event NewMaxAssets(uint256 oldMaxAssets, uint256 newMaxAssets)",
            "inputs": {
                "oldMaxAssets": {
                    "type": "uint256",
                    "indexed": false
                },
                "newMaxAssets": {
                    "type": "uint256",
                    "indexed": false
                }
            }
        },
        "NewPauseGuardian": {
            "code": "event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian)",
            "inputs": {
                "oldPauseGuardian": {
                    "type": "address",
                    "indexed": false
                },
                "newPauseGuardian": {
                    "type": "address",
                    "indexed": false
                }
            }
        },
        "NewPriceOracle": {
            "code": "event NewPriceOracle(contract PriceOracle oldPriceOracle, contract PriceOracle newPriceOracle)",
            "inputs": {
                "oldPriceOracle": {
                    "type": "contract PriceOracle",
                    "indexed": false
                },
                "newPriceOracle": {
                    "type": "contract PriceOracle",
                    "indexed": false
                }
            }
        }
    },
    "errors": {},
    "path": "",
    "title": "Compound's Comptroller Contract",
    "author": "Compound",
    "name": "ComptrollerG4"
}